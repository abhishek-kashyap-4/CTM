




---

datakind: 'annotatedNDVI'
# GDD
GDD: False

GLOBALNAME_INPUT: 'Point01NDVI'
GLOBALNAME_OUTPUT: 'Point01NDVI'

# DEFAULTS
DEFAULTS:
    
    Tolerance_options: ['SEVERE' , 'AVOID' , 'DEBUG' ] 
    Tolerance: 'SEVERE'
    
    loop_options: 
        on_error_options: ['quit','ignore']
        on_error : 'quit'
        
    printing_options: ['default','multiple']
    printing : ['default']
    
    # With run  - saved_redo, search for a saved file. If doesn't exist, compute it.
    run_options : ['saved','redo' , 'saved_redo' , 'redo_saved' , 'manual']
    run : 'saved_redo'
    
    after_run_options: ['save','pass']
    after_run: 'save'
        
        
# RUN  - use for manual run_options
RUN: 
    Execute: 
        ExecuteOptions: "{ -1/False : don't execute , 1: Execute, don't save file , 2/True: Execute, save file"
        ParallelTexttoCSV: -1
        TemperatureGather: False 
        GenerateCentroidTemperatures: False 
        GetGlobalSowDates: False 
        GenerateCentroidTemperaturesCGDD: False 
        
        SowDateEstimate: 1
        HarmonisedTimeComposite: 1 
        FeatureAddition: 1
        FeatureSelection: 2
        EDA: 1
        ML: 2
        
        
    Options:
        
        
        
    


##################################################################################
# FUNCTIONS 

FUNCTIONS: 
    CloudCorrection: 
        skip: True 
        params: 
            feature_pattern: 'CLDPRB'
            method: 'Mask'
            threshold: 50
        method_options: ['Mask','CloudFill']
        
        
    GenerateCentroidTemperatures:
    
        seperate_window : True
        columns_to_copy_old : ['.geo','Crop_Type','Sow_Date','Field_Id','Harv_Date']
        columns_to_copy : ['Unique_Id']
        
    
    GenerateCentroidTemperaturesCGDD:
        skip: False 
        params: 
            increment : 25
            method : 'dynamic' 
            startdate : '2023-01-01'
        seperate_window : True
        all_methods : ['dynamic' , 'fixed']
        
    HarmonisedGDDComposite:
        skip: False 
        params:
            interpol_method: 'closest'
            increment: 100
            extreme: 10
            maxcgdd: 5000
            verbose: True
            date_method: 'fixed'
        interpol_methods: ['lookbehind' , 'lookahead' , 'closest' , 'reduce_mean_n' , 'reduce_median_n' ,  'reduce_mean_extreme' , 'reduce_median_extreme'  , 'reduce_mean_extreme_left' ,'reduce_mean_extreme_right'] 
    
    GDDComposite_new:
        skip: False 
        start_methods: ['fixed','sowdate','notnull'] #notnull isn't tested.
        params:
            anchor_save: 'Data\Interim\CGDD\FieldOptical_anchors.csv'
            start_method: 'sowdate'
            fixed_date: '20230101'
            # You need to add hm , hm_temperatures as arguments from the pipline.
            increment: 100
            
    HarmonisedTimeComposite:
        skip: False
        params:
            fixed: False 
            fixed_date: '20230101'
            increment: 20
    Preprocess:
        skip: False
        params:
            which: 'Optical'
            impose_date: False
            method_nulls: 'interpol_pass'
            method_remap: 'Lazy'
            targetname: 'Crop_Type' 
            #mapper: {}
        method_nulls_options: ['dont','remrow','remcol','strategy_<num for cols>_all' , 'interpol_pass','interpol_kelman'] 
        method_remap_options: ['Lazy' , 'Drop' , 'Ignore' , 'Raise' ]
            
    
    FeatureAddition:
        skip: False
        params:
            time_indexes: 'all'
            comb: True
            tim: True 
            STN: False 
            tim_method: 'Full' 
            STN_w: 3
            
    FeatureSelection:
        skip: False
        params: 
            by: 'covar'
            correlation_threshold: 0.7
            cutoff: 15
            verbose: True
    Models:
        skip: False
        params:
            target: -1
            models: ['RF']
            tune: True
            cv: False
        models_avail : ['RF','SVM','XGB'] # This isn't implemented yet.
     
#####################################################################################


PostAnalysis:
    Incorrect: 'Save' # Save the harmonized, Satellite, and temperature data. Basically, everything. Divide by train/test (or add the column)
    ErrorClustering: True
    
